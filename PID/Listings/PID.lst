C51 COMPILER V9.56.0.0   PID                                                               07/02/2018 02:00:44 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Objects\PID.obj
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE PID.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\PID.lst) TABS(2) OBJECT(.\Objects\PID.obj)

line level    source

   1          #include <reg52.h>
   2          #define uchar unsigned char
   3          #define uint unsigned int
   4          #define ulint long int
   5          #define CYCLE 40        //调整一次周期（PWM周期）
   6          
   7          sbit ENA=P1^0;
   8          sbit IN1=P1^1;
   9          sbit IN2=P1^2;
  10          
  11          struct PID_Value
  12          {
  13              ulint liEkVal[3];
  14              uchar uEkFlag[3];
  15              uchar uKP_Coe;
  16              uchar uKI_Coe;
  17              uchar uKD_Coe;
  18              uint iPriVal;
  19              uint iSetVal;
  20              uint iCurVal;
  21          }PID;
  22          uchar count;          //计数数
  23          uchar PWM;            //所占空间比
  24          
  25          void PID_Operation(uchar BIG,uchar LITTLE)//PID运算
  26          {
  27   1          ulint Temp[3] = {0};
  28   1          ulint PostSum = 0;
  29   1          ulint NegSum = 0;
  30   1          
  31   1              if(BIG - LITTLE > 10)
  32   1                  PID.iPriVal = CYCLE/4;
  33   1              else
  34   1              {
  35   2                  Temp[0] = BIG - LITTLE;
  36   2                  PID.uEkFlag[1] = 0;
  37   2                  PID.liEkVal[2] = PID.liEkVal[1];
  38   2                  PID.liEkVal[1] = PID.liEkVal[0];
  39   2                  PID.liEkVal[0] = Temp[0];
  40   2                
  41   2                  if(PID.liEkVal[0] > PID.liEkVal[1])
  42   2                  {
  43   3                      Temp[0] = PID.liEkVal[0] - PID.liEkVal[1];
  44   3                      PID.uEkFlag[0] = 0;
  45   3                  }                                       
  46   2                  else
  47   2                  {
  48   3                      Temp[0] = PID.liEkVal[1] - PID.liEkVal[0];
  49   3                      PID.uEkFlag[0] = 1;
  50   3                  }
  51   2                  
  52   2                  Temp[2] = PID.liEkVal[1] * 2;
  53   2                  if((PID.liEkVal[0] + PID.liEkVal[2]) > Temp[2])
  54   2                  {
C51 COMPILER V9.56.0.0   PID                                                               07/02/2018 02:00:44 PAGE 2   

  55   3                      Temp[2] = (PID.liEkVal[0] + PID.liEkVal[2]) - Temp[2];
  56   3                      PID.uEkFlag[2]=0;
  57   3                  }                                               
  58   2                  else
  59   2                  {
  60   3                      Temp[2] = Temp[2] - (PID.liEkVal[0] + PID.liEkVal[2]); 
  61   3                      PID.uEkFlag[2] = 1;
  62   3                  }
  63   2                  
  64   2                  Temp[0] = (ulint)PID.uKP_Coe * Temp[0];
  65   2                  Temp[1] = (ulint)PID.uKI_Coe * PID.liEkVal[0];
  66   2                  Temp[2] = (ulint)PID.uKD_Coe * Temp[2];
  67   2                  
  68   2                  if(PID.uEkFlag[0] == 0)
  69   2                      PostSum += Temp[0];
  70   2                  else                                            
  71   2                      NegSum += Temp[0];
  72   2      
  73   2                  if(PID.uEkFlag[1] == 0)     
  74   2                      PostSum += Temp[1];
  75   2                  else;
  76   2      
  77   2                  if(PID.uEkFlag[2]==0)
  78   2                      PostSum += Temp[2];
  79   2                  else
  80   2                      NegSum += Temp[2];
  81   2                          
  82   2                  PostSum += (ulint)PID.iPriVal;
  83   2                  
  84   2                  if(PostSum > NegSum)
  85   2                  { 
  86   3                      Temp[0] = PostSum - NegSum;
  87   3                      if(Temp[0] < CYCLE/4 )
  88   3                          PID.iPriVal = (uint)Temp[0];
  89   3                      else PID.iPriVal = CYCLE/4;
  90   3                  }
  91   2                  else;
  92   2              }
  93   1      }
  94          
  95          void PID_Output(void)
  96          {
  97   1        if(PID.iSetVal>PID.iCurVal)//正转
  98   1        {
  99   2          PID_Operation(PID.iSetVal,PID.iCurVal);
 100   2          IN1=0;
 101   2          IN2=1;
 102   2        }
 103   1        if(PID.iSetVal<PID.iCurVal)//反转
 104   1        {
 105   2          PID_Operation(PID.iCurVal,PID.iSetVal);
 106   2          IN1=1;
 107   2          IN2=0;
 108   2        }
 109   1        PWM=PID.iPriVal;
 110   1      }
 111          
 112          void InitTimer0()
 113          {
 114   1        TMOD=0x01;
 115   1        TH0=(65536-100)/256;
 116   1        TL0=(65536-100)%256;
C51 COMPILER V9.56.0.0   PID                                                               07/02/2018 02:00:44 PAGE 3   

 117   1        EA=1;
 118   1        ET0=1;
 119   1        TR0=1;    //开定时器0
 120   1      }
 121          
 122          void InitCar()
 123          {
 124   1        ENA=1;
 125   1      }
 126          
 127          void Init()
 128          {
 129   1        InitTimer0();
 130   1        InitCar();
 131   1      }
 132           
 133          void main()
 134          {
 135   1        Init();
 136   1        while(1)
 137   1        {
 138   2          PID_Output();
 139   2        }
 140   1      }
 141           
 142          void timer0() interrupt 1 //定时器0中断（100us）
 143          {
 144   1        count++;
 145   1        if(count<=PWM)
 146   1          ENA=1;
 147   1        else
 148   1          ENA=0;
 149   1        if(count==CYCLE)
 150   1        {
 151   2          ENA=~ENA;
 152   2          count=0;
 153   2        }
 154   1        
 155   1        TH0=(65536-100)/256;
 156   1        TL0=(65536-100)%256;
 157   1      }//PWM调速


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    770    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
